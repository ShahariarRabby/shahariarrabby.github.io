[{"leaderboard_name": "panoptic-dev", "date": "18-08-18", "description": "We train stuff segmentation model and instance segmentation model separately and merge the results. For the stuff segmentation, we enhance PSPNet [1] with a backbone network by larger dilation rate and more residual blocks to enlarge the effective receptive field. In addition, we jointly train COCO stuff and instance to get more context information. Our single model achieved 54.1 mIOU on the validation set. An ensemble of three models boosted the accuracy to 55.9. We use 8 V100 (16G memory) GPU cards. For the instance segmentation, we adopt a two-pass pipeline. Please see more details in our instance segmentation submission. Our final panoptic segmentation result is 53.2 PQ on test-dev, by merging the stuff result (55.9 mIOU in the validation set) and instance result (48.8 mmAP on test-dev). We use ShuffleNet V2 as the backbone network of above two tasks. [1] Pyramid Scene Parsing Network. Hengshuang Zhao, Jianping Shi, Xiaojuan Qi, Xiaogang Wang, Jiaya Jia. CVPR 2017. [2] ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design, Ningning Ma, Xiangyu Zhang, Hai-Tao Zheng, Jian Sun, ECCV 2018.", "leaderboard_id": 101, "url": "", "team": {"id": 1, "members": "Chao Peng, Jingbo Wang, Changqian Yu, Huanyu Liu, Xu Liu, Zeming Li, Xiangyu Zhang, Gang Yu, Jian Sun. Megvii (Face++)", "name": "Megvii (Face++)"}, "results": "{\"PQ\": 0.532, \"SQ\": 0.832, \"RQ\": 0.629, \"PQTH\": 0.622, \"SQTH\": 0.855, \"RQTH\": 0.725, \"PQST\": 0.395, \"SQST\": 0.797, \"RQST\": 0.485}", "results_details": ""}, {"leaderboard_name": "panoptic-dev", "date": "18-08-17", "description": "We get panoptic segmentation result by combining stuff result from semantic segmentation and thing result from instance segmentation with the strategy described in Panoptic Segmentation[1]. For segmentation of thing, we develop a region-based object detection and instance segmentation approach, which follows Mask-RCNN[2]. Feature pyramid network[3] is used as our backbone for multi-scale feature extraction. And we use Cascade-RCNN[4] as our box head, which iteratively regress and refine the box location. For mask head, we propose a new module called Cascade-MASK, which exploits the ROIs of different stage from box head to iteratively refine the mask results and improve the mask result by 1.3% on val5000 in our best res50 based model. Finally we use senet154 as backbone to generate the segmentation results of thing. For segmentation of stuff, we follow the FCN way which regard semantic segmentation as pixel-wise classification. We combine all thing classes as one class for training. Feature pyramid network[3] modified with deformable convolution[5] and non-local convolution[6] is used as our backbone. For all submissions, we only use the ImageNet pretrained model and train with coco2017 panoptic segmentation annotations and instance segmentation annotations. submission 1 combined stuff result using resnext152 64g as backbone and thing result using senet as backbone train with instance segmentaion annotation. submission 2 combined stuff result using ensamble model(resnext152 64g and senet 154 and resnext152 32g and resnet 152) as backbone and thing result using senet as backbone train with instance segmentaion annotation. submission 3 combined stuff result using ensamble model(resnext152 64g and senet 154 and resnext 152 32g and resnet 152) as backbone and thing result using senet as backbone train with instance segmentaion annotation. submission 4 combined stuff result using ensamble model(resnext152 64g and senet 154 and resnext 152 32g) as backbone and thing result using senet as backbone train with instance segmentaion annotation. submission 5 combined stuff result using ensamble model(resnext152 64g and senet 154 and resnext 152 32g and resnet 152) as backbone and thing result using senet as backbone train with panoptic segmentaion annotation. Performance for single models on test-dev is listed: resnext152 64g: 0.4555 senet 154: 0.4553 resnext152 32g:0.4544 resnet152: 0.4518 [1] Kirillov A, He K, Girshick R B, et al. Panoptic Segmentation.[J]. arXiv: Computer Vision and Pattern Recognition, 2018. [2] He K, Gkioxari G, Dollar P, et al. Mask R-CNN[J]. international conference on computer vision, 2017: 2980-2988. [3] Lin T, Dollar P, Girshick R B, et al. Feature Pyramid Networks for Object Detection[J]. computer vision and pattern recognition, 2017: 936-944. [4] Cai Z, Vasconcelos N. Cascade R-CNN: Delving Into High Quality Object Detection[J]. computer vision and pattern recognition, 2018. [5] Dai J, Qi H, Xiong Y, et al. Deformable Convolutional Networks[J]. international conference on computer vision, 2017: 764-773. [6] Wang X, Girshick R B, Gupta A, et al. Non-Local Neural Networks[J]. computer vision and pattern recognition, 2018.", "leaderboard_id": 101, "url": "", "team": {"id": 2, "members": "Yanwei Li*[a], Naiyu Gao*[b], Chaoxu Guo[a], Xinze Chen[a], Qian Zhang[a], Guan Huang[a], Xin Zhao[b], Kaiqi Huang[b], Dalong Du[a], Chang Huang[a](* indicates equal contribution); [a] Horizon Robotics, [b] CRISE, CASIA", "name": "Caribbean"}, "results": "{\"PQ\": 0.468, \"SQ\": 0.805, \"RQ\": 0.571, \"PQTH\": 0.543, \"SQTH\": 0.818, \"RQTH\": 0.659, \"PQST\": 0.355, \"SQST\": 0.785, \"RQST\": 0.438}", "results_details": ""}, {"leaderboard_name": "panoptic-dev", "date": "18-08-18", "description": "We get instance segmentation and semantic segmentation results separately. Our instance segmentation model is based on ResNeXt-152-FPN structure, and is improved by non-local module, SE module, and bottom-up path aggregation in an alternate updating manner. Our single instance segmentation model gets 43.5 mAP on test-dev. For semantic segmentation, we train a ResNeXt-152-FPN with label bank. A Conv-LSTM model is trained to refine the instance segmentation results. We use thing segments to override stuff segments to generate the panoptic output. Label prior and some thresholds are used to improve the final performance. For our submitted entry, we use the average of two semantic segmentation output. No ensemble is made on panoptic output. No external data is used.", "leaderboard_id": 101, "url": "", "team": {"id": 3, "members": "Yibo Yang, Xia Li, Hongyang Li, Tiancheng Shen, Zhouchen Lin, Jian Dong, Jiashi Feng, Shuicheng Yan", "name": "PKU_360"}, "results": "{\"PQ\": 0.463, \"SQ\": 0.796, \"RQ\": 0.561, \"PQTH\": 0.586, \"SQTH\": 0.837, \"RQTH\": 0.696, \"PQST\": 0.276, \"SQST\": 0.736, \"RQST\": 0.356}", "results_details": ""}, {"leaderboard_name": "panoptic-dev", "date": "18-08-18", "description": "simple combine of semantic from PSPNet50 (train for 50 epochs) and instance from Mask-RCNN101 (train for 180k iterations)", "leaderboard_id": 101, "url": "", "team": {"id": 4, "members": "", "name": "ps"}, "results": "{\"PQ\": 0.416, \"SQ\": 0.795, \"RQ\": 0.507, \"PQTH\": 0.504, \"SQTH\": 0.826, \"RQTH\": 0.605, \"PQST\": 0.284, \"SQST\": 0.749, \"RQST\": 0.359}", "results_details": ""}, {"leaderboard_name": "panoptic-dev", "date": "18-08-18", "description": "we used an ensemble model for the COCO 2018 Panoptic Segmentation Challenge. For the instance segmentation task, we fine tuned a pretrained Mask-RCNN [1] network with the COCO panoptic annotations while we trained from scratch a DeepLabv3+ [2] model for the semantic segmentation task. The two-channel output is created by combining the output of the said models, prioritizing the instance masks over the semantic masks. The panoptic quality of the final output reached 36.0 on the COCO test-dev2017 subset.", "leaderboard_id": 101, "url": "", "team": {"id": 6, "members": "Darwin Bautista, Jose Marie Mendoza, Rowel Atienza. Electrical and Electronics Engineering Institute. University of the Philippines.", "name": "TeamPH"}, "results": "{\"PQ\": 0.359, \"SQ\": 0.767, \"RQ\": 0.449, \"PQTH\": 0.441, \"SQTH\": 0.800, \"RQTH\": 0.545, \"PQST\": 0.236, \"SQST\": 0.716, \"RQST\": 0.303}", "results_details": ""}, {"leaderboard_name": "panoptic-dev", "date": "18-08-19", "description": "Our method is based on Mask-rcnn[1]. And only the COCO panoptic data (no external data) is used for training our method. For submission 1:The DCN[2] and Direction feature[3] are added to the Mask-rcnn framework. For submission 2:The DCN[2] and Direction feature[3] are added to the Mask-rcnn framework. And we train with the stuff and things annotations separately. For submission 3:The DCN[2] and Direction feature[3] are added to the Mask-rcnn framework. Then we consider the objects segmentations as layered set which some objects(like small things) are on top of other objects(like stuff). For submission 4:This submission on Codalab evaluation server is failed. For submission 5:The DCN[2] and Direction feature[3] are added to the Mask-rcnn framework. Then we consider the objects segmentations as layered set which some objects(like small things) are on top of other objects(like stuff). Lastly, we fill up some blank pixels with sutff by Nearest Neighbor. For submission 6:The DCN[2] and Direction feature[3] are added to the Mask-rcnn framework. Then we consider the objects segmentations as layered set which some objects(like small things) are on top of other objects(like stuff). Lastly, we fill up all blank pixels by Nearest Neighbor. [1] He K, Gkioxari G, Dollar P, et al. Mask R-CNN[J]. IEEE Transactions on Pattern Analysis & Machine Intelligence, 2017, PP(99):1-1. [2] Dai J, Qi H, Xiong Y, et al. Deformable convolutional networks[J]. CoRR, abs/1703.06211, 2017, 1(2): 3. [3] Chen L C, Hermans A, Papandreou G, et al. MaskLab: Instance segmentation by refining object detection with semantic and direction features[J]. arXiv preprint arXiv:1712.04837, 2017.", "leaderboard_id": 101, "url": "", "team": {"id": 7, "members": "Qi Zheng, Min Yang, Chenyang Li, Peng Huang, Chao Liang, Jun Chen", "name": "MMAP-seg"}, "results": "{\"PQ\": 0.322, \"SQ\": 0.760, \"RQ\": 0.408, \"PQTH\": 0.390, \"SQTH\": 0.782, \"RQTH\": 0.491, \"PQST\": 0.220, \"SQST\": 0.728, \"RQST\": 0.284}", "results_details": ""}, {"leaderboard_name": "panoptic-dev", "date": "18-08-16", "description": "The method makes instance segmentation and semantic segmentation predictions in a single network, and combines these outputs using heuristics to create a single panoptic segmentation output. The architecture consists of a ResNet-50 feature extractor shared by the semantic segmentation and instance segmentation branch. For instance segmentation, a Mask R-CNN type of architecture is used, while the semantic segmentation branch is augmented with a Pyramid Pooling Module. The feature extractor is initialized using weights from a model that is pre-trained on ImageNet. The network is trained on a single Titan Xp GPU, and the submitted results are from a single model.", "leaderboard_id": 101, "url": "https://arxiv.org/abs/1809.02110", "team": {"id": 8, "members": "Daan de Geus, Panagiotis Meletis, Gijs Dubbelman. Eindhoven University of Technology.", "name": "MPS-TU Eindhoven"}, "results": "{\"PQ\": 0.272, \"SQ\": 0.719, \"RQ\": 0.359, \"PQTH\": 0.296, \"SQTH\": 0.716, \"RQTH\": 0.394, \"PQST\": 0.234, \"SQST\": 0.723, \"RQST\": 0.306}", "results_details": ""}, {"leaderboard_name": "panoptic-dev", "date": "18-08-17", "description": "Based on the powerful FPN-Mask-RCNN [1,2] and Deeplabv3+ [3] model, we explore the possibility of combining the two models into a single e2e trainable model. When comparing the two models side by side, we can observe that both models share a similar \u201cencoder-decoder\u201d architecture that can be combined. In FPN-Mask-RCNN, the FPN backbone [1], which has an \u201cencoder-decoder\u201d architecture, can be used to create the Deeplabv3+ model. This is done by adding a FCN-style semantic prediction head onto the final feature-map of the pyramid structure. We reason that since each pyramid level contains information from the previous layer and also from the encoder branch through the skip connections, the final feature-map should contain the relevant information needed for pixel-wise semantic segmentation. In addition to the semantic head, we also incorporate the ASPP-layer from Deeplabv3+ into the FPN backbone. The model is then trained e2e (stably) using a combination of 6 losses: 5 losses from the standard Mask-RCNN and 1 from the semantic head. For the final panoptic segmentation, we employ only an adaptive thresholding method (AT-Fusion) to fuse the output predictions from the Mask-RCNN head and also the semantic prediction head. The fusion is done by first fusing the instances together using adaptive thresholding and prediction scores, while the semantic prediction is used to fill in the background. The adaptive thresholding is done by coupling the final thresholding of the instance detection with the prediction probability of the semantic head. There are 2 reasons for this adaptive thresholding. Firstly, compared to just using a certain region in the Mask-RCNN head, the semantic head uses the information from the entire image/scene for prediction, making the prediction much more reliable. Secondly, as \u201cargmax\u201d is used to produce the final semantic labels, a certain label doesn\u2019t need to have a 0.99 prediction probability to be chosen as the final output. This means that if semantic prediction can be performed without hard constraint, then the same idea can also be applied to the instance detection. As of the time of submission, the first results are submitted for the challenge while experiments and works are still being done to validate the performance of the proposed method. [1] LIN, Tsung-Yi, et al. Feature Pyramid Networks for Object Detection. In: CVPR. 2017. S. 4. [2] HE, Kaiming, et al. Mask r-cnn. In: Computer Vision (ICCV), 2017 IEEE International Conference on. IEEE, 2017. S. 2980-2988. [3] CHEN, Liang-Chieh, et al. Encoder-decoder with atrous separable convolution for semantic image segmentation. arXiv preprint arXiv:1802.02611, 2018.", "leaderboard_id": 101, "url": "", "team": {"id": 9, "members": "Ee Heng Chen", "name": "LeChen"}, "results": "{\"PQ\": 0.263, \"SQ\": 0.742, \"RQ\": 0.332, \"PQTH\": 0.313, \"SQTH\": 0.762, \"RQTH\": 0.393, \"PQST\": 0.187, \"SQST\": 0.712, \"RQST\": 0.241}", "results_details": ""}, {"leaderboard_name": "panoptic-dev", "date": "18-08-17", "description": "Dense32layer based FCN all in one Panoptic Segementation.all in one model(==single network inference) runs 512x512 image size (~90ms@TitanXp, ~130ms@TitanX pytorch0.4) external data : ImageNet (base pretrain), Cityscapes (base semseg trained), Mapillary v1.0 (base semseg trained. not v1.1 since we received v1.1 on 8/4) Semseg downstream is up to 1/16, uses 1/4 and 1/16 feature for instance masks, alike MaskRCNN but is based on modified RetinaNet with 4xConvBNs for class/box instance mask is generated only 14x14 but later to be warped and fused with SemSeg result. Mask uses class wise mask HxWxC (not class agnostic)", "leaderboard_id": 101, "url": "", "team": {"id": 10, "members": "Tamaki Kojima", "name": "Artemis"}, "results": "{\"PQ\": 0.168, \"SQ\": 0.716, \"RQ\": 0.220, \"PQTH\": 0.168, \"SQTH\": 0.724, \"RQTH\": 0.220, \"PQST\": 0.167, \"SQST\": 0.704, \"RQST\": 0.219}", "results_details": ""}, {"leaderboard_name": "panoptic-dev", "date": "18-08-19", "description": "", "leaderboard_id": 101, "url": "", "team": {"id": 11, "members": "", "name": "grasshopyx"}, "results": "{\"PQ\": 0.026, \"SQ\": 0.284, \"RQ\": 0.034, \"PQTH\": 0.000, \"SQTH\": 0.000, \"RQTH\": 0.000, \"PQST\": 0.066, \"SQST\": 0.713, \"RQST\": 0.084}", "results_details": ""}, {"leaderboard_name": "panoptic-dev", "date": "18-08-07", "description": "", "leaderboard_id": 101, "url": "", "team": {"id": 12, "members": "", "name": "microljy"}, "results": "{\"PQ\": 0.021, \"SQ\": 0.312, \"RQ\": 0.026, \"PQTH\": 0.033, \"SQTH\": 0.410, \"RQTH\": 0.041, \"PQST\": 0.003, \"SQST\": 0.165, \"RQST\": 0.004}", "results_details": ""}]